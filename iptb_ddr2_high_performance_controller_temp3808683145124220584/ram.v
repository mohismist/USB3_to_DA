// megafunction wizard: %DDR2 High Performance Controller v13.1%
// GENERATION: XML

// ============================================================
// Megafunction Name(s):
// 			ram_controller_phy
// ============================================================
// Generated by DDR2 High Performance Controller 13.1 [Altera, IP Toolbench 1.3.0 Build 162]
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
// ************************************************************
// Copyright (C) 1991-2017 Altera Corporation
// Any megafunction design, and related net list (encrypted or decrypted),
// support information, device programming or simulation file, and any other
// associated documentation or information provided by Altera or a partner
// under Altera's Megafunction Partnership Program may be used only to
// program PLD devices (but not masked PLD devices) from Altera.  Any other
// use of such megafunction design, net list, support information, device
// programming or simulation file, or any other related documentation or
// information is prohibited for any other purpose, including, but not
// limited to modification, reverse engineering, de-compiling, or use with
// any other silicon devices, unless such use is explicitly licensed under
// a separate agreement with Altera or a megafunction partner.  Title to
// the intellectual property, including patents, copyrights, trademarks,
// trade secrets, or maskworks, embodied in any such megafunction design,
// net list, support information, device programming or simulation file, or
// any other related documentation or information provided by Altera or a
// megafunction partner, remains with Altera, the megafunction partner, or
// their respective licensors.  No other licenses, including any licenses
// needed under any third party's intellectual property, are provided herein.


module ram (
	local_address,
	local_write_req,
	local_read_req,
	local_burstbegin,
	local_wdata,
	local_be,
	local_size,
	global_reset_n,
	pll_ref_clk,
	soft_reset_n,
	local_ready,
	local_rdata,
	local_rdata_valid,
	local_refresh_ack,
	local_init_done,
	reset_phy_clk_n,
	mem_odt,
	mem_cs_n,
	mem_cke,
	mem_addr,
	mem_ba,
	mem_ras_n,
	mem_cas_n,
	mem_we_n,
	mem_dm,
	phy_clk,
	aux_full_rate_clk,
	aux_half_rate_clk,
	reset_request_n,
	mem_clk,
	mem_clk_n,
	mem_dq,
	mem_dqs);


	input	[23:0]	local_address;
	input		local_write_req;
	input		local_read_req;
	input		local_burstbegin;
	input	[63:0]	local_wdata;
	input	[7:0]	local_be;
	input	[6:0]	local_size;
	input		global_reset_n;
	input		pll_ref_clk;
	input		soft_reset_n;
	output		local_ready;
	output	[63:0]	local_rdata;
	output		local_rdata_valid;
	output		local_refresh_ack;
	output		local_init_done;
	output		reset_phy_clk_n;
	output	[0:0]	mem_odt;
	output	[0:0]	mem_cs_n;
	output	[0:0]	mem_cke;
	output	[12:0]	mem_addr;
	output	[2:0]	mem_ba;
	output		mem_ras_n;
	output		mem_cas_n;
	output		mem_we_n;
	output	[1:0]	mem_dm;
	output		phy_clk;
	output		aux_full_rate_clk;
	output		aux_half_rate_clk;
	output		reset_request_n;
	inout	[0:0]	mem_clk;
	inout	[0:0]	mem_clk_n;
	inout	[15:0]	mem_dq;
	inout	[1:0]	mem_dqs;

	wire signal_wire0 = 1'b0;
	wire [13:0] signal_wire1 = 14'b0;
	wire [13:0] signal_wire2 = 14'b0;
	wire [5:0] signal_wire3 = 6'b0;
	wire [5:0] signal_wire4 = 6'b0;
	wire signal_wire5 = 1'b0;
	wire [15:0] signal_wire6 = 16'b0;
	wire [1:0] signal_wire7 = 2'b0;
	wire [1:0] signal_wire8 = 2'b0;
	wire [1:0] signal_wire9 = 2'b0;
	wire [1:0] signal_wire10 = 2'b0;
	wire [1:0] signal_wire11 = 2'b0;
	wire signal_wire12 = 1'b0;
	wire signal_wire13 = 1'b0;
	wire signal_wire14 = 1'b0;
	wire signal_wire15 = 1'b0;
	wire [3:0] signal_wire16 = 4'b0;
	wire [2:0] signal_wire17 = 3'b0;
	wire signal_wire18 = 1'b0;
	wire [8:0] signal_wire19 = 9'b0;
	wire [3:0] signal_wire20 = 4'b0;
	wire signal_wire21 = 1'b0;
	wire signal_wire22 = 1'b0;
	wire signal_wire23 = 1'b0;
	wire signal_wire24 = 1'b0;
	wire signal_wire25 = 1'b0;
	wire signal_wire26 = 1'b0;
	wire signal_wire27 = 1'b0;
	wire signal_wire28 = 1'b0;

	ram_controller_phy	ram_controller_phy_inst(
		.local_address(local_address),
		.local_write_req(local_write_req),
		.local_read_req(local_read_req),
		.local_burstbegin(local_burstbegin),
		.local_wdata(local_wdata),
		.local_be(local_be),
		.local_size(local_size),
		.local_refresh_req(signal_wire0),
		.oct_ctl_rs_value(signal_wire1),
		.oct_ctl_rt_value(signal_wire2),
		.dqs_delay_ctrl_import(signal_wire3),
		.dqs_offset_delay_ctrl(signal_wire4),
		.hc_scan_enable_access(signal_wire5),
		.hc_scan_enable_dq(signal_wire6),
		.hc_scan_enable_dm(signal_wire7),
		.hc_scan_enable_dqs(signal_wire8),
		.hc_scan_enable_dqs_config(signal_wire9),
		.hc_scan_din(signal_wire10),
		.hc_scan_update(signal_wire11),
		.hc_scan_ck(signal_wire12),
		.pll_reconfig_write_param(signal_wire13),
		.pll_reconfig_read_param(signal_wire14),
		.pll_reconfig(signal_wire15),
		.pll_reconfig_counter_type(signal_wire16),
		.pll_reconfig_counter_param(signal_wire17),
		.pll_reconfig_soft_reset_en_n(signal_wire18),
		.pll_reconfig_data_in(signal_wire19),
		.pll_phasecounterselect(signal_wire20),
		.pll_phaseupdown(signal_wire21),
		.pll_phasestep(signal_wire22),
		.pll_reconfig_enable(signal_wire23),
		.local_autopch_req(signal_wire24),
		.local_self_rfsh_req(signal_wire25),
		.local_self_rfsh_chip(signal_wire26),
		.local_multicast_req(signal_wire27),
		.local_refresh_chip(signal_wire28),
		.global_reset_n(global_reset_n),
		.pll_ref_clk(pll_ref_clk),
		.soft_reset_n(soft_reset_n),
		.local_ready(local_ready),
		.local_rdata(local_rdata),
		.local_rdata_valid(local_rdata_valid),
		.local_refresh_ack(local_refresh_ack),
		.local_init_done(local_init_done),
		.reset_phy_clk_n(reset_phy_clk_n),
		.dll_reference_clk(),
		.dqs_delay_ctrl_export(),
		.hc_scan_dout(),
		.pll_reconfig_busy(),
		.pll_reconfig_clk(),
		.pll_reconfig_reset(),
		.pll_reconfig_data_out(),
		.pll_phase_done(),
		.aux_scan_clk_reset_n(),
		.aux_scan_clk(),
		.local_self_rfsh_ack(),
		.local_power_down_ack(),
		.mem_odt(mem_odt),
		.mem_cs_n(mem_cs_n),
		.mem_cke(mem_cke),
		.mem_addr(mem_addr),
		.mem_ba(mem_ba),
		.mem_ras_n(mem_ras_n),
		.mem_cas_n(mem_cas_n),
		.mem_we_n(mem_we_n),
		.mem_dm(mem_dm),
		.mem_reset_n(),
		.phy_clk(phy_clk),
		.aux_full_rate_clk(aux_full_rate_clk),
		.aux_half_rate_clk(aux_half_rate_clk),
		.reset_request_n(reset_request_n),
		.mem_clk(mem_clk),
		.mem_clk_n(mem_clk_n),
		.mem_dq(mem_dq),
		.mem_dqs(mem_dqs),
		.mem_dqsn());
endmodule
